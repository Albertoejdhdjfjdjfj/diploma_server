"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
exports.__esModule = true;
exports.schemaGQL = void 0;
var gql = require('apollo-server-express').gql;
exports.schemaGQL = gql(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    type Query {\n        getProfileData:UserInfo\n        userLogIn(email: String!, password: String!): LoginPayload\n        getGameRooms(sort: String!, page: Int!, limit: Int!): [GameRoom!]!\n        getMessages(gameId:String!):[Message]\n        getPlayers(gameId:String!):GameMembers!\n        getActiveGame:ActiveGameResponse!\n    } \n \n    type Mutation {\n        userSignUp( nickname: String!,email: String!,password: String!): User\n        createGameRoom(name: String!): GameRoom\n        joinGameRoom(id:ID!):GameRoom\n        leaveGameRoom(id:ID!):GameRoom\n        startGame(id:ID!):String\n        sendMessage(content:String!,gameId:String!):String\n    }\n  \n    type Subscription{\n        newMessage(token:String, gameId:String): NewMessageResponse\n        updatedGameRoom: GameRoom\n        activeGame(token:String):ActiveGameResponse\n    }\n\n    type NewMessageResponse{\n        message:Message\n    }\n    \n    type ActiveGameResponse {\n        gameId:String\n    }\n\n    type GameMembers{\n        players:[Player],\n        observers:[Player]\n    }\n\n    type MessageResponse {\n        receiver:Player,\n        chat: [Message!]!,\n    }   \n\n    type Message {\n        id:ID,\n        sender: Player,\n        content:String\n    }\n\n    type GameRoom {\n        id: ID!,\n        name: String!,\n        creator: Player!,\n        players: [Player!]!,\n        observers:[Player!]!\n    }\n\n    type Player{\n       playerId: String, \n       nickname: String\n    }\n\n    type User {\n        id: ID,\n        nickname: String,\n        email: String,\n    }\n\n    type UserInfo {\n        id: ID,\n        nickname: String,\n    }\n\n    type LoginPayload {\n        user: User!,\n        token: String!\n    }\n"], ["\n    type Query {\n        getProfileData:UserInfo\n        userLogIn(email: String!, password: String!): LoginPayload\n        getGameRooms(sort: String!, page: Int!, limit: Int!): [GameRoom!]!\n        getMessages(gameId:String!):[Message]\n        getPlayers(gameId:String!):GameMembers!\n        getActiveGame:ActiveGameResponse!\n    } \n \n    type Mutation {\n        userSignUp( nickname: String!,email: String!,password: String!): User\n        createGameRoom(name: String!): GameRoom\n        joinGameRoom(id:ID!):GameRoom\n        leaveGameRoom(id:ID!):GameRoom\n        startGame(id:ID!):String\n        sendMessage(content:String!,gameId:String!):String\n    }\n  \n    type Subscription{\n        newMessage(token:String, gameId:String): NewMessageResponse\n        updatedGameRoom: GameRoom\n        activeGame(token:String):ActiveGameResponse\n    }\n\n    type NewMessageResponse{\n        message:Message\n    }\n    \n    type ActiveGameResponse {\n        gameId:String\n    }\n\n    type GameMembers{\n        players:[Player],\n        observers:[Player]\n    }\n\n    type MessageResponse {\n        receiver:Player,\n        chat: [Message!]!,\n    }   \n\n    type Message {\n        id:ID,\n        sender: Player,\n        content:String\n    }\n\n    type GameRoom {\n        id: ID!,\n        name: String!,\n        creator: Player!,\n        players: [Player!]!,\n        observers:[Player!]!\n    }\n\n    type Player{\n       playerId: String, \n       nickname: String\n    }\n\n    type User {\n        id: ID,\n        nickname: String,\n        email: String,\n    }\n\n    type UserInfo {\n        id: ID,\n        nickname: String,\n    }\n\n    type LoginPayload {\n        user: User!,\n        token: String!\n    }\n"])));
var templateObject_1;
