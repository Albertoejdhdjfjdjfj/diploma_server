var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var gql = require('apollo-server-express').gql;
var typeDefs = gql(__makeTemplateObject(["\n    type Query {\n        getUserInfo(id:ID!):UserInfo\n        userLogIn(email: String!, password: String!): LoginPayload\n        getGameRooms(sort: String, page: Int, limit: Int): [GameRoom!]!\n    }\n\n    type Mutation {\n        userSignUp( nickname: String!,email: String!,password: String!): User\n        createGameRoom(name: String!): GameRoom\n        joinGameRoom(id:ID!):GameRoom\n        leaveGameRoom(id:ID!):GameRoom\n        startGame(id:ID!):String\n        sendMessage(content:String):String\n        sendSelection(targetId:String):String\n    }\n\n    type Subscription{\n        message(token:String): MessageResponse\n        role(token:String): RoleResponse\n    }\n    \n    type RoleResponse {\n        receiver:Player,\n        role:String\n    }\n\n    type MessageResponse {\n        receiver:Player,\n        chat: [Message!]!,\n    }\n\n    type Message {\n        sender: Sender,\n        content:String\n    }\n\n    type Sender{\n        user:Player\n    }\n\n    type GameRoom {\n        id: ID!,\n        name: String!,\n        creator: Creator!,\n        players: [Player!]!,\n        observers:[Player!]!\n    }\n\n    type Creator{\n       creatorId: String, \n       nickname: String\n    }\n\n    type Player{\n       playerId: String, \n       nickname: String\n    }\n\n    type User {\n        id: ID,\n        nickname: String,\n        email: String,\n    }\n\n    type UserInfo {\n        id: ID,\n        nickname: String,\n    }\n\n    type LoginPayload {\n        user: User!,\n        token: String!\n    }\n"], ["\n    type Query {\n        getUserInfo(id:ID!):UserInfo\n        userLogIn(email: String!, password: String!): LoginPayload\n        getGameRooms(sort: String, page: Int, limit: Int): [GameRoom!]!\n    }\n\n    type Mutation {\n        userSignUp( nickname: String!,email: String!,password: String!): User\n        createGameRoom(name: String!): GameRoom\n        joinGameRoom(id:ID!):GameRoom\n        leaveGameRoom(id:ID!):GameRoom\n        startGame(id:ID!):String\n        sendMessage(content:String):String\n        sendSelection(targetId:String):String\n    }\n\n    type Subscription{\n        message(token:String): MessageResponse\n        role(token:String): RoleResponse\n    }\n    \n    type RoleResponse {\n        receiver:Player,\n        role:String\n    }\n\n    type MessageResponse {\n        receiver:Player,\n        chat: [Message!]!,\n    }\n\n    type Message {\n        sender: Sender,\n        content:String\n    }\n\n    type Sender{\n        user:Player\n    }\n\n    type GameRoom {\n        id: ID!,\n        name: String!,\n        creator: Creator!,\n        players: [Player!]!,\n        observers:[Player!]!\n    }\n\n    type Creator{\n       creatorId: String, \n       nickname: String\n    }\n\n    type Player{\n       playerId: String, \n       nickname: String\n    }\n\n    type User {\n        id: ID,\n        nickname: String,\n        email: String,\n    }\n\n    type UserInfo {\n        id: ID,\n        nickname: String,\n    }\n\n    type LoginPayload {\n        user: User!,\n        token: String!\n    }\n"]));
module.exports = typeDefs;
